package edu.sru.thangiah.zeus.vrptw.vrptwcostfunctions;

import edu.sru.thangiah.zeus.core.*;
import edu.sru.thangiah.zeus.vrptw.VRPTWNodes;
import edu.sru.thangiah.zeus.vrptw.VRPTWNodesLinkedList;

/**
 * Cost functions specific to VRPNodesLinkedList level
 * <p>Title: Zeus - A Unified Object Oriented Model for VRP's</p>
 * <p>Description: cost functions specific to VRP Nodes LinkedList level</p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: </p>
 * @author Sam R. Thangiah
 * @version 2.0
 */
public class VRPTWNodesLLCostFunctions
    extends VRPTWAbstractCostFunctions implements
    java.io.Serializable  {

  public double getTotalCost(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    setTotalCost(o);

    return vNodes.getAttributes().getTotalCost();
  }

  public float getTotalDemand(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    setTotalDemand(o);

    return (int) vNodes.getAttributes().getTotalDemand();
  }

  public double getTotalDistance(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    setTotalDistance(o);

    return vNodes.getAttributes().getTotalDistance();
  }

  public double getTotalTravelTime(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    setTotalTravelTime(o);

    return vNodes.getAttributes().getMaxTravelTime();
  }
  
  public double getTotalPenalty(Object o)
  {
	  VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
	  setTotalPenalty(o);
	  
	  return vNodes.getAttributes().getTotalPenalty();
  }

  public double getMaxTravelTime(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    setMaxTravelTime(o);

    return vNodes.getAttributes().getMaxTravelTime();
  }

  public double getAvgTravelTime(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    setAvgTravelTime(o);

    return vNodes.getAttributes().getMaxTravelTime();
  }

  public void setTotalCost(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    // cost of traveling node to node is 
    double cost = getTotalDistance(o);

    vNodes.getAttributes().setTotalCost(cost);
  }
  
  /*
   * Traverse through the linked and get the totalDemand for the route
   */
  public void setTotalDemand(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;

    VRPTWNodes tempCell = (VRPTWNodes) vNodes.getHead().getNext();
    int tempD = 0;

    while (tempCell != vNodes.getTail()) {
      tempD += tempCell.getDemand();
      tempCell = (VRPTWNodes) tempCell.getNext();
    }

    vNodes.getAttributes().setTotalDemand(tempD);
  }
  
  /*
   * Traverse through the linked and get the totalDistance for the route
   */

  public void setTotalDistance(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    float distTravelled = 0;
    VRPTWNodes left = (VRPTWNodes) vNodes.getHead();
    VRPTWNodes right = (VRPTWNodes) left.getNext(); //node after left

    while (right != vNodes.getTail()) { //head){

      try {
    	  // dist = sqrt( (x1 - x2)^2 + (y1 - y2)^2 )
    	  
    	  double deltaX, deltaY;
    	  double x1 = right.getShipment().getXCoord();
    	  double x2 = left.getShipment().getXCoord();
    	  double y1 = right.getShipment().getYCoord();
    	  double y2 = left.getShipment().getYCoord();
    	  
    	  deltaX = x1 - x2;
    	  deltaY = y1 - y2;
    	  
          distTravelled += (float) Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));
      }
      catch (ArithmeticException e) {
        System.out.println(e);
      }

      //System.out.println(distTravelled);
      left = right;
      right = (VRPTWNodes) right.getNext();
    }

    vNodes.getAttributes().setTotalDistance(distTravelled);
  }

  /*
   * Traverse through the route and obtain the totalTravelTime
   */
  
  public void setTotalTravelTime(Object o) {
		System.out.println("");
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
    
    boolean isLate = false;

    double travTime = 0;
	double totalPenalty = 0;

    VRPTWNodes node = (VRPTWNodes) vNodes.getHead().getNext(); //start at the first customer
	System.out.println("NodeLLCF: depot x = " + vNodes.getHead().getShipment().getXCoord() + ", y = " + vNodes.getHead().getShipment().getYCoord());

    while(node != vNodes.getTail())
    {
    	VRPTWNodes prevNode = (VRPTWNodes) node.getPrev();
    	
    	double deltaX = Math.abs(prevNode.getShipment().getXCoord() - node.getShipment().getXCoord());
    	double deltaY = Math.abs(prevNode.getShipment().getYCoord() - node.getShipment().getYCoord());
    	
    	double tBetweenNodes = Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));
		System.out.println("NodeLLCF: tBetweenNodes (" + prevNode.getIndex() + " -> " + node.getIndex() + ") = " + tBetweenNodes);
    	
		travTime += tBetweenNodes;
		System.out.println("NodeLLCF: travTime = " + travTime);
    	
    	node.setBeginTime(Math.max(travTime, node.getEarly()));
    	
    	//boolean checkService = true;
    	
    	if(travTime < node.getEarly())
    	{
    		// Truck was early; apply waiting time
    		double tWaitingAtNode = node.getShipment().getEarly() - travTime;
    		travTime += tWaitingAtNode;
    		System.out.println("NodeLLCF: waiting occurred - travTime = " + travTime);
    	}
    	else if(travTime > node.getLate())
    	{
    		// Truck was late; apply penalty
    		totalPenalty += (travTime - node.getLate());
			//checkService = false;
    		if(!isLate)
    		{
    			System.out.println("NodeLLCF: lateness occurred - penalty = " + totalPenalty);
    			isLate = true;
    		}
    	}
    	
    	travTime += node.getServiceTime();
    	
    	/* Not checking if delivery finished before late
    	if(checkService && travTime > node.getLate())
    	{
    		// Truck couldn't finish delivery; apply penalty
    		totalPenalty += (travTime - node.getLate());
    		System.out.println("NodeLLCF: delivery could not finish - penalty = " + totalPenalty);
    	}
    	*/
    	
    	//System.out.println("Travel time is now " + travTime);

    	node = (VRPTWNodes) node.getNext();
    }
	
	double deltaX = Math.abs(vNodes.getHead().getShipment().getXCoord() - node.getShipment().getXCoord());
	double deltaY = Math.abs(vNodes.getHead().getShipment().getYCoord() - node.getShipment().getYCoord());
	
	double tBetweenNodes = Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));
	System.out.println("NodeLLCF: tBetweenNodes (" + vNodes.getHead().getIndex() + " -> " + node.getIndex() + ") = " + tBetweenNodes);
	
	travTime += tBetweenNodes;
    
    if(totalPenalty > 0)
    {
    	vNodes.getAttributes().setTotalPenalty(totalPenalty);
    }
    
    vNodes.getAttributes().setTotalTravelTime(travTime);
  }
  
  public void setTotalPenalty(Object o)
  {
	  VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;
	  
	  double travTime = 0;
	  double totalPenalty = 0;

	    VRPTWNodes node = (VRPTWNodes) vNodes.getHead().getNext(); //start at the first customer

	    while (node != vNodes.getTail()) {
	    	VRPTWNodes prevNode = (VRPTWNodes) node.getPrev();
	    	
	    	double deltaX = prevNode.getShipment().getXCoord() - node.getShipment().getXCoord();
	    	double deltaY = prevNode.getShipment().getYCoord() - node.getShipment().getYCoord();
	    	
	    	double tBetweenNodes = Math.abs(Math.sqrt((deltaX * deltaX) + (deltaY * deltaY)));
	    	
	    	if(node.getShipment().getLate() < travTime)
	    	{
	    		// Truck was late; apply penalty
	    		totalPenalty += (travTime - node.getShipment().getLate());
	    	}
	    	
	    	travTime += node.getShipment().getDuration();
	    	//System.out.println("Travel time is now " + travTime);

	    	node = (VRPTWNodes) node.getNext();
	    }
	    
	  vNodes.getAttributes().setTotalPenalty(totalPenalty);
  }

  public void setMaxTravelTime(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;

    double linehaul = 0;

    /*
        if (vNodes.getHead().getNext() != vNodes.getTail()) {
     double backhaul = ProblemInfo.distanceMatrix.getDataAt(vNodes.getHead()
     .getDistanceMatrixIndex(),
              vNodes.getHead().getNext().getDistanceMatrixIndex())
                                                      .getActualDistance();
          backhaul = (backhaul * ProblemInfo.averageBusSpeed) / 60;
          linehaul = getTotalTravelTime(o) - backhaul;
        }
     */
    vNodes.getAttributes().setMaxTravelTime(linehaul);
  }

  public void setAvgTravelTime(Object o) {
    VRPTWNodesLinkedList vNodes = (VRPTWNodesLinkedList) o;

    //System.out.println("calculating average travel time");
    double aTT = 0;

    /*
        if (vNodes.getHead().getNext() != vNodes.getTail()) {
          Nodes tempCell = vNodes.getHead().getNext();
          double haulTime = getTotalTravelTime(o);

          while (tempCell.getNext() != null) {
            //add the travel time while on the road (distance)
            double backhaul = 0;

            //if the first cell and the next cell are not the same pick up point
            if (tempCell.getDistanceMatrixIndex() != tempCell.getNext()
     .getDistanceMatrixIndex()) {
              MatrixNode node = ProblemInfo.distanceMatrix.getDataAt(tempCell.getDistanceMatrixIndex(),
                  tempCell.getNext().getDistanceMatrixIndex());
              backhaul = node.getDistance(vNodes.getTruckType().getTruckNo());

              backhaul = (backhaul * ProblemInfo.averageBusSpeed) / 60;

              aTT += (haulTime - backhaul);
              haulTime = haulTime - backhaul;
            }

            //add the travel time for the student getting on the bus
     if (tempCell.getShipment().getBusTypeNeeded().equals(ProblemInfo.REGULAR)) {
              aTT += (ProblemInfo.R_PICK_UP_TIME * tempCell.getDemand());
            } else if (tempCell.getShipment().getBusTypeNeeded().equals(ProblemInfo.WHEELCHAIR)) {
              aTT += (ProblemInfo.W_PICK_UP_TIME * tempCell.getDemand());
            } else if (tempCell.getShipment().getBusTypeNeeded().equals(ProblemInfo.WHEELCHAIR_ELEVATOR)) {
              aTT += (ProblemInfo.WE_PICK_UP_TIME * tempCell.getDemand());
            } else if (tempCell.getShipment().getBusTypeNeeded().equals(ProblemInfo.MONITOR)) {
              aTT += (ProblemInfo.M_PICK_UP_TIME * tempCell.getDemand());
            }

            tempCell = tempCell.getNext();
          }

          //System.out.println("average after getting on bus: " + aTT);
          //System.out.println("final average: " + aTT + "/" + (getSize()-2) + " = " + (aTT / (getSize()-2)));
          if (vNodes.isCollapsed()) {
            //System.out.println("collapsed size = " + vNodes.getCollapsedSize() + " regular size = " + vNodes.getSize());
            aTT = aTT / (vNodes.getCollapsedSize());
          } else {
            aTT = aTT / (vNodes.getSize() - 2);
          }
        }
     */
    vNodes.getAttributes().setMaxTravelTime(aTT);
  }

  /** @todo Might not need CrossRoadPenaltyCost and TurnAroundPenaltyCost */
  public void calculateTotalsStats(Object o) {
    setTotalDemand(o);
    setTotalDistance(o);
    setTotalTravelTime(o);
    setMaxTravelTime(o);
    setAvgTravelTime(o);
    //setTotalCrossRoadPenaltyCost(o);
    //setTotalTurnAroundPenaltyCost(o);
    setTotalCost(o);
    //setTotalConstraintCost(o);
  }
}
